// <auto-generated />
using System;
using MedicalExamination.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MedicalExamination.Migrations
{
    [DbContext(typeof(MedicalExaminationContext))]
    [Migration("20190119213343_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MedicalExamination.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MedicalExamination.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MedicalExamination.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DiaseOutcomeId");

                    b.Property<int>("DoctorId");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("ExaminationResultId");

                    b.Property<int>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("DiaseOutcomeId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ExaminationResultId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MedicalExamination.Entities.DiagnosType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DiagnosTypes");
                });

            modelBuilder.Entity("MedicalExamination.Entities.DiaseOutcomeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DiaseOutcomeTypes");
                });

            modelBuilder.Entity("MedicalExamination.Entities.Doctor", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<Guid>("UserId");

                    b.HasKey("PersonId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MedicalExamination.Entities.ExaminationResultType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ExaminationResultTypes");
                });

            modelBuilder.Entity("MedicalExamination.Entities.InsuranceCompanyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("InsuranceCompanyTypes");
                });

            modelBuilder.Entity("MedicalExamination.Entities.PassportIssuePlaceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PassportIssuePlaceTypes");
                });

            modelBuilder.Entity("MedicalExamination.Entities.Patient", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<Guid>("InsuranceCompanyId");

                    b.Property<string>("InsuranceNumber")
                        .IsRequired();

                    b.HasKey("PersonId");

                    b.HasIndex("InsuranceCompanyId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalExamination.Entities.PatientDiagnos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AppointmentId");

                    b.Property<Guid>("DiagnosId");

                    b.Property<bool>("IsMain");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DiagnosId");

                    b.ToTable("PatientDiagnoses");
                });

            modelBuilder.Entity("MedicalExamination.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<int>("Gender");

                    b.Property<string>("INN");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("MiddleName");

                    b.Property<DateTime>("PassportIssueDate");

                    b.Property<Guid>("PassportIssuePlaceId");

                    b.Property<string>("PassportNumber");

                    b.Property<string>("PassportSeries");

                    b.Property<string>("SNILS");

                    b.HasKey("Id");

                    b.HasIndex("PassportIssuePlaceId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("MedicalExamination.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DoctorId");

                    b.Property<Guid>("PositionId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("MedicalExamination.Entities.PositionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PositionTypes");
                });

            modelBuilder.Entity("MedicalExamination.Entities.ProvideService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PositionId");

                    b.Property<Guid>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ProvideServices");
                });

            modelBuilder.Entity("MedicalExamination.Entities.ServiceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("DoctorId");

                    b.Property<int>("PatientId");

                    b.Property<string>("Result");

                    b.Property<Guid>("ServiceTypeId");

                    b.Property<string>("TubeNumber");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceHistories");
                });

            modelBuilder.Entity("MedicalExamination.Entities.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("MedicalExamination.Entities.Appointment", b =>
                {
                    b.HasOne("MedicalExamination.Entities.DiaseOutcomeType", "Outcome")
                        .WithMany()
                        .HasForeignKey("DiaseOutcomeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalExamination.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalExamination.Entities.ExaminationResultType", "ExaminationResult")
                        .WithMany()
                        .HasForeignKey("ExaminationResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalExamination.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalExamination.Entities.Doctor", b =>
                {
                    b.HasOne("MedicalExamination.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalExamination.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalExamination.Entities.Patient", b =>
                {
                    b.HasOne("MedicalExamination.Entities.InsuranceCompanyType", "InsuranceCompany")
                        .WithMany()
                        .HasForeignKey("InsuranceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalExamination.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalExamination.Entities.PatientDiagnos", b =>
                {
                    b.HasOne("MedicalExamination.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalExamination.Entities.DiagnosType", "Diagnos")
                        .WithMany()
                        .HasForeignKey("DiagnosId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalExamination.Entities.Person", b =>
                {
                    b.HasOne("MedicalExamination.Entities.PassportIssuePlaceType", "PassportIssuePlace")
                        .WithMany()
                        .HasForeignKey("PassportIssuePlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalExamination.Entities.Position", b =>
                {
                    b.HasOne("MedicalExamination.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalExamination.Entities.PositionType", "PositionType")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalExamination.Entities.ProvideService", b =>
                {
                    b.HasOne("MedicalExamination.Entities.PositionType", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalExamination.Entities.ServiceType", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalExamination.Entities.ServiceHistory", b =>
                {
                    b.HasOne("MedicalExamination.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalExamination.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalExamination.Entities.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
